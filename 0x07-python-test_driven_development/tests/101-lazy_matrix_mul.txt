>>> lazy_matrix_mul = __import__('101-lazy_matrix_mul').lazy_matrix_mul
>>> 
>>> print(lazy_matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4]]))
[[ 7 10]
 [15 22]]
>>> print(lazy_matrix_mul([[1, 2]], [[3, 4], [5, 6]]))
[[13 16]]
>>> 
>>> print("my test cases......")
my test cases......
>>> 
>>> matrix1 = [
...     [1, 2, 3],
...     [4, 5, 6],
...     [7, 8, 9]
... ]
>>> 
>>> matrix2 = [
...     [9, 8, 7],
...     [6, 4, 5],
...     [3, 2, 1]
... ]
>>> print(lazy_matrix_mul(matrix1, matrix2))
[[ 30  22  20]
 [ 84  64  59]
 [138 106  98]]
>>> 
>>> 
>>> matrix1 = [
...     [1.5, 2.8, 3.3],
...     [4.0, 5, 6.7],
...     [7.8, 8.9, 9.5]
... ]
>>> matrix2 = [
...     [9.09, 8.7, 7],
...     [6.5, 9, 4],
...     [3.8, 2, 0]
... ]
>>> 
>>> 
>>> print(lazy_matrix_mul(matrix1, matrix2))
[[ 44.375  44.85   21.7  ]
 [ 94.32   93.2    48.   ]
 [164.852 166.96   90.2  ]]
>>> 
>>> print(lazy_matrix_mul([[]], []))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/root/alx-higher_level_programming/0x07-python-test_driven_development/101-lazy_matrix_mul.py", line 55, in lazy_matrix_mul
    raise ValueError("m_a can't be empty")
ValueError: m_a can't be empty
>>> 
>>> print(lazy_matrix_mul([[1, 2, 3]], [[]]))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/root/alx-higher_level_programming/0x07-python-test_driven_development/101-lazy_matrix_mul.py", line 58, in lazy_matrix_mul
    raise ValueError("m_b can't be empty")
ValueError: m_b can't be empty
>>> 
>>> matrix1 = [
...     (1, 2, 3),
...     [4, 5, 6],
...     [7, 8, 9]
... ]
>>> matrix2 = [
...     [9, 8, 7],
...     [6, 5, 4],
...     [3, 2, 1]
... ]
>>> 
>>> print(lazy_matrix_mul(matrix1, matrix2))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/root/alx-higher_level_programming/0x07-python-test_driven_development/101-lazy_matrix_mul.py", line 48, in lazy_matrix_mul
    raise TypeError("m_a must be a list of lists")
TypeError: m_a must be a list of lists
>>> 
>>> matrix1 = [
...     [1, 2, 3],
...     [4, 5, 6],
...     [7, 8, 9]
... ]
>>> matrix2 = (
...     [9, 8, 7],
...     [6, 5, 4],
...     [3, 2, 1]
... )
>>> 
>>> print(lazy_matrix_mul(matrix1, matrix2))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/root/alx-higher_level_programming/0x07-python-test_driven_development/101-lazy_matrix_mul.py", line 26, in lazy_matrix_mul
    raise TypeError("m_b must be a list")
TypeError: m_b must be a list
>>> 
>>> 
>>> matrix1 = [
...     [1, 2, 3],
...     [4, 5, 6],
...     [7, 8, 9]
... ]
>>> matrix2 = [
...     [9, 8, 7],
...     [6, 5],
...     [3, 2, 1]
... ]
>>> 
>>> print(lazy_matrix_mul(matrix1, matrix2))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/root/alx-higher_level_programming/0x07-python-test_driven_development/101-lazy_matrix_mul.py", line 71, in lazy_matrix_mul
    raise ValueError("each row of m_b must be of the same size")
ValueError: each row of m_b must be of the same size
>>> 
>>> matrix1 = [
...     [1, 2, 3],
...     [4, 5, 6],
...     [7, 8, 9]
... ]
>>> matrix2 = [
...     [9, 8, 7],
...     [6, '5', 4],
...     [3, 2, 1]
... ]
>>> 
>>> print(lazy_matrix_mul(matrix1, matrix2))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/root/alx-higher_level_programming/0x07-python-test_driven_development/101-lazy_matrix_mul.py", line 104, in lazy_matrix_mul
    validate_mat_arr(m_b, err_mb)
  File "/root/alx-higher_level_programming/0x07-python-test_driven_development/101-lazy_matrix_mul.py", line 100, in validate_mat_arr
    raise TypeError(err_msg)
TypeError: m_b should contain only integers or floats
>>> 
